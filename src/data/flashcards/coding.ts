import { Flashcard } from '@/types/flashcard';

export const codingFlashcards: Flashcard[] = [
  // --- JavaScript - Beginner ---
  { id: 'code1', question: 'Vad är en variabel i programmering?', answer: 'En namngiven behållare för att lagra data (t.ex. ett tal eller en textsträng).', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'code2', question: 'Vad är skillnaden mellan "==" och "===" i JavaScript?', answer: '"==" jämför bara värdet (kan göra typomvandling). "===" jämför både värde och datatyp (striktare).', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'code3', question: 'Vad är en array (lista) i JavaScript?', answer: 'En ordnad samling av värden, skapad med hakparenteser `[]`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'code4', question: 'Vad är en funktion i JavaScript?', answer: 'Ett återanvändbart kodblock som utför en specifik uppgift när det anropas.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'code5', question: 'Vad gör en `for`-loop i JavaScript?', answer: 'Upprepar ett kodblock ett bestämt antal gånger.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg6', question: 'Hur skriver man en kommentar i JavaScript?', answer: 'Med `//` för enradskommentarer eller `/*` och `*/` för flerradskommentarer.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg7', question: 'Vad gör `console.log("Hej")`?', answer: 'Skriver ut texten "Hej" i webbläsarens utvecklarkonsol.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg8', question: 'Vad är skillnaden mellan `let` och `const`?', answer: 'Båda deklarerar variabler med blockscope. `let` kan omtilldelas, `const` kan inte omtilldelas efter den initiala tilldelningen.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg9', question: 'Hur länkar man en extern JavaScript-fil till HTML?', answer: 'Med `<script src="filnamn.js"></script>`-taggen.', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'beginner'},
  { id: 'js_beg10', question: 'Vad är ett "click event"?', answer: 'En händelse som inträffar när en användare klickar på ett HTML-element (t.ex. en knapp).', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg11', question: 'Vad är en sträng (string) i JavaScript?', answer: 'En sekvens av tecken, t.ex. `"Hej Världen!"`. Används för text.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg12', question: 'Vad är ett nummer (number) i JavaScript?', answer: 'En datatyp för både heltal (t.ex. `10`) och decimaltal (t.ex. `3.14`).', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg13', question: 'Vad är en boolean i JavaScript?', answer: 'En datatyp som kan ha ett av två värden: `true` eller `false`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg14', question: 'Vad gör `if`-satsen?', answer: 'Utför ett kodblock endast om ett visst villkor är sant (`true`).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'beginner'},
  { id: 'js_beg15', question: 'Vad gör `else` i en `if`-sats?', answer: 'Utför ett alternativt kodblock om villkoret i `if`-satsen är falskt (`false`).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'beginner'},
  { id: 'js_beg16', question: 'Hur skapar man ett objekt i JavaScript?', answer: 'Ofta med måsvingar `{}` och key-value par, t.ex. `{ namn: "Anna", age: 30 }`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg17', question: 'Hur kommer man åt ett värde i ett objekt?', answer: 'Med punktnotation (`objekt.nyckel`) eller hakparentesnotation (`objekt[\'nyckel\']`).', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg18', question: 'Hur lägger man till ett element i slutet av en array?', answer: 'Med `push()`-metoden, t.ex. `minArray.push("nytt värde");`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg19', question: 'Hur får man längden på en array?', answer: 'Med `.length`-egenskapen, t.ex. `minArray.length`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'beginner'},
  { id: 'js_beg20', question: 'Vad returnerar jämförelsen `5 > 3`?', answer: '`true`.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'beginner'},

  // --- JavaScript - Intermediate ---
  { id: 'js_int6', question: 'Vad är DOM?', answer: 'Document Object Model. En trädliknande representation av HTML-strukturen som JavaScript kan interagera med för att ändra sidans innehåll och utseende.', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'intermediate'},
  { id: 'js_int7', question: 'Hur ändrar man textinnehållet i ett HTML-element med id "info"?', answer: '`document.getElementById("info").textContent = "Ny text";`', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int8', question: 'Förklara `null` vs `undefined`.', answer: '`undefined`: variabel har deklarerats men inte fått ett värde. `null`: avsiktligt tilldelat värde som betyder "inget värde" eller "tomt".', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int9', question: 'Vad är JSON?', answer: 'JavaScript Object Notation. Ett textbaserat format för datautbyte, lätt att läsa för människor och parsa för maskiner.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'intermediate'},
  { id: 'js_int10', question: 'Vad är en callback-funktion?', answer: 'En funktion som skickas som argument till en annan funktion, för att anropas senare (t.ex. när en asynkron operation är klar).', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int11', question: 'Förklara scope (funktionsscope vs blockscope).', answer: 'Scope avgör var variabler är tillgängliga. `var` har funktionsscope. `let` och `const` har blockscope (begränsat till `{}`-block).', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int12', question: 'Vad är skillnaden mellan synkron och asynkron JavaScript?', answer: 'Synkron kod blockerar exekvering tills den är klar. Asynkron kod (t.ex. `setTimeout`, `fetch`) tillåter annan kod att köras medan den väntar.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int13', question: 'Vad är en Promise?', answer: 'Ett objekt som representerar det eventuella slutförandet (eller misslyckandet) av en asynkron operation och dess resulterande värde.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int14', question: 'Vad bestämmer värdet på `this` i en vanlig funktion?', answer: 'Hur funktionen anropas. Kan vara globala objektet (window/global), objektet metoden anropas på, `undefined` (strict mode), eller explicit satt med `call`/`apply`/`bind`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int15', question: 'Vad gör array-metoden `map`?', answer: 'Skapar en ny array genom att anropa en given funktion på varje element i den ursprungliga arrayen.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int16', question: 'Vad gör array-metoden `filter`?', answer: 'Skapar en ny array med alla element som klarar ett test (returnerar `true`) implementerat av den givna funktionen.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int17', question: 'Vad gör array-metoden `reduce`?', answer: 'Exekverar en reduceringsfunktion på varje element i arrayen, vilket resulterar i ett enda utvärde (t.ex. summa, objekt).', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int18', question: 'Hur lägger man till en händelselyssnare på en knapp med id "myButton"?', answer: '`document.getElementById("myButton").addEventListener("click", funktionsNamn);`', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int19', question: 'Vad är skillnaden mellan `slice` och `splice` för arrayer?', answer: '`slice` returnerar en ny array (en kopia av en del) utan att ändra originalet. `splice` ändrar originalarrayen genom att ta bort/ersätta/lägga till element.', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},
  { id: 'js_int20', question: 'Vad är `typeof`-operatorn?', answer: 'Returnerar en sträng som indikerar datatypen för en operand (t.ex. "string", "number", "boolean", "object", "function", "undefined").', category: 'coding', subcategory: 'JavaScript', difficulty: 'intermediate'},

  // --- JavaScript - Advanced ---
  { id: 'js_adv1', question: 'Hur fungerar `async`/`await`?', answer: 'Syntaxsocker ovanpå Promises. `async` gör att en funktion returnerar en Promise. `await` pausar funktionen tills en Promise är resolved (eller rejected). Gör asynkron kod mer läsbar.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv2', question: 'Förklara closures (slutningar).', answer: 'En funktion har tillgång till variabler i sitt yttre (omslutande) scope, även efter att den yttre funktionen har returnerat. Skapas när en funktion definieras inuti en annan.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv3', question: 'Vad är prototypkedjan (prototype chain)?', answer: 'Mekanismen för arv i JavaScript. Om en egenskap inte finns på ett objekt, letar JavaScript uppåt i dess prototypkedja tills egenskapen hittas eller kedjan tar slut.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv4', question: 'Beskriv event loop, call stack och message queue.', answer: 'Call stack: håller reda på funktionsanrop. Message queue: köar asynkrona callbacks. Event loop: flyttar callbacks från kön till stacken när stacken är tom.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv5', question: 'Hur skiljer sig `this` i pilfunktioner (`=>`) från vanliga funktioner?', answer: 'Pilfunktioner har inget eget `this`-värde; de ärver `this` från sitt omslutande lexikaliska scope. Kan inte bindas med `call`/`apply`/`bind`.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv6', question: 'Vad är hoisting och hur påverkar det `var`, `let`, `const`?', answer: 'Deklarationer (men inte initialiseringar) "lyfts" till toppen av sitt scope. `var`-variabler hoistats och initieras med `undefined`. `let`/`const` hoistats men är i en "temporal dead zone" tills deklarationen nås.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv7', question: 'Vad är syftet med Web Workers?', answer: 'Att köra tunga eller långvariga skript i en separat bakgrundstråd för att inte blockera användargränssnittet (huvudtråden).', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'advanced'},
  { id: 'js_adv8', question: 'Vad är currying?', answer: 'Att transformera en funktion som tar flera argument till en sekvens av funktioner som var och en tar ett enda argument.', category: 'coding', subcategory: 'Funktionell Programmering', difficulty: 'advanced'},
  { id: 'js_adv9', question: 'Jämför `localStorage`, `sessionStorage` och `cookies`.', answer: 'localStorage/sessionStorage: lagrar mer data (5-10MB), skickas ej med HTTP-requests, endast klientsidan. Cookies: mindre data (4KB), skickas med requests, kan sättas av server/klient, har utgångstid.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'advanced'},
  { id: 'js_adv10', question: 'Vad är fördelarna med att använda Strict Mode?', answer: 'Fångar vanliga kodningsmisstag som tysta fel, förhindrar osäkra handlingar (t.ex. globala variabler), reserverar nyckelord för framtiden.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv11', question: 'Vad är destructuring assignment?', answer: 'Syntax som gör det möjligt att packa upp värden från arrayer eller egenskaper från objekt till distinkta variabler. Ex: `const { name, age } = user;`', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv12', question: 'Vad är spread syntax (`...`)?', answer: 'Kan användas för att expandera en iterable (array, sträng) till enskilda argument/element, eller för att kopiera/sammanfoga objekt/arrayer.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv13', question: 'Vad är en ES6-modul (`import`/`export`)?', answer: 'Standardiserat system för att organisera och dela kod mellan JavaScript-filer. `export` gör kod tillgänglig, `import` hämtar den.', category: 'coding', subcategory: 'JavaScript', difficulty: 'advanced'},
  { id: 'js_adv14', question: 'Vad är memoization?', answer: 'En optimeringsteknik där resultatet av dyra funktionsanrop cachas (lagras) så att samma resultat kan returneras direkt vid efterföljande anrop med samma argument.', category: 'coding', subcategory: 'Algoritmer', difficulty: 'advanced'},
  { id: 'js_adv15', question: 'Vad är en Higher-Order Function (HOF)?', answer: 'En funktion som antingen tar en eller flera funktioner som argument, eller returnerar en funktion som resultat (t.ex. `map`, `filter`, `reduce`).', category: 'coding', subcategory: 'Funktionell Programmering', difficulty: 'advanced'},

  // --- JavaScript - Expert ---
  { id: 'code-ex1', question: 'Förklara begreppet "closure" i JavaScript mer detaljerat.', answer: 'En closure skapas när en inre funktion refererar till variabler i sitt yttre (omslutande) funktions scope. Denna referens kvarstår även efter att den yttre funktionen har exekverat, vilket möjliggör datainkapsling och stateful funktioner.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'code-ex2', question: 'Beskriv event loopens faser mer detaljerat (inkl. micro/macro tasks).', answer: 'En cykel: 1. Ta en macrotask (setTimeout, I/O) från kön, exekvera. 2. Exekvera alla microtasks (Promise callbacks, queueMicrotask) tills kön är tom. 3. Rendera UI (om nödvändigt). Repetera.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex3', question: 'Hur fungerar `yield` och `yield*` i generator-funktioner?', answer: '`yield` pausar generatorn och returnerar ett värde. `yield*` delegerar till en annan generator eller iterable, och returnerar dess värden ett i taget.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex4', question: 'Vad är "traps" i samband med JavaScript Proxies?', answer: 'Metoder på proxy-objektets handler som avlyssnar och potentiellt modifierar fundamentala operationer på målobjektet (t.ex. `get`, `set`, `apply`, `construct`).', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex5', question: 'Varför använda WeakMap/WeakSet istället för Map/Set?', answer: 'För att undvika minnesläckor. Nycklar/värden i Weak*-varianterna är svagt refererade och förhindrar inte garbage collection av objekten om inga andra starka referenser finns.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex6', question: 'Beskriv mark-and-sweep algoritmen för garbage collection.', answer: 'En vanlig GC-algoritm: 1. Markera alla nåbara objekt från rotobjekten (globala, stack). 2. Svep igenom minnet och frigör alla omarkerade (onåbara) objekt.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'js_ex7', question: 'Vad är skillnaden mellan Shadow DOM och Virtual DOM?', answer: 'Shadow DOM: webbläsarfunktion för inkapsling av DOM/CSS i komponenter. Virtual DOM: koncept/biblioteksteknik (React, Vue) för effektiv uppdatering av riktiga DOM genom diffing.', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'expert'},
  { id: 'js_ex8', question: 'Hur kommunicerar man med en Service Worker från huvudsidan?', answer: 'Via `postMessage()`-metoden och `message`-händelselyssnare på båda sidor (på `navigator.serviceWorker` och inom workern).', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'expert'},
  { id: 'js_ex9', question: 'Varför är microtask-kön viktig för Promises?', answer: 'Promise `.then`/`.catch`/`.finally`-callbacks läggs i microtask-kön, vilket garanterar att de körs så snart som möjligt efter den nuvarande macrotasken, innan nästa rendering eller macrotask.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex10', question: 'Vad är skillnaden mellan Tree Shaking och Code Splitting?', answer: 'Tree Shaking: eliminerar oanvänd kod (dead code elimination) inom moduler. Code Splitting: delar upp kod i mindre "chunks" som kan laddas vid behov (on-demand). Båda optimerar laddningstid.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'expert'},
  { id: 'js_ex11', question: 'Vad är en IIFE (Immediately Invoked Function Expression)?', answer: 'En funktion som definieras och anropas omedelbart. Användes historiskt för att skapa lokalt scope innan blockscope (`let`/`const`) fanns. `(function() { /* code */ })();`', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex12', question: 'Vad är tail call optimization (TCO)?', answer: 'En optimering där ett funktionsanrop i "svansposition" (det sista som händer) inte skapar en ny stack frame, vilket förhindrar stack overflow vid djup rekursion. (Begränsat stöd i JS-motorer).', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex13', question: 'Vad är `Symbol` datatypen?', answer: 'En primitiv datatyp (ES6) vars instanser är unika och oföränderliga. Används ofta som nycklar för objekt-egenskaper för att undvika namnkonflikter.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex14', question: 'Vad är `Proxy` och `Reflect` API:erna?', answer: '`Proxy` tillåter att skapa ett omslagsobjekt för att avlyssna/modifiera operationer på ett målobjekt. `Reflect` tillhandahåller standardmetoder för dessa operationer, ofta använda inom Proxy handlers.', category: 'coding', subcategory: 'JavaScript', difficulty: 'expert'},
  { id: 'js_ex15', question: 'Vad är WebAssembly (Wasm)?', answer: 'Ett binärt instruktionsformat som fungerar som kompileringsmål för språk som C/C++/Rust, möjliggör nära-nativ prestanda i webbläsare.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'expert'},

  // --- HTML - Beginner ---
  { id: 'code_beg6', question: 'Vad är HTML?', answer: 'HTML (HyperText Markup Language) är standardspråket för att skapa och strukturera innehåll på webbsidor.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg2', question: 'Vad är en HTML-tagg?', answer: 'En markör, omsluten av `<` och `>`, som definierar ett element och dess semantik/struktur (t.ex. `<p>`, `<img>`).', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg3', question: 'Vad är skillnaden mellan `<head>` och `<body>` i ett HTML-dokument?', answer: '`<head>` innehåller metadata om dokumentet (titel, länkar till CSS/JS, teckenkodning). `<body>` innehåller det faktiska innehållet som visas på sidan.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg4', question: 'Vad gör `<h1>` till `<h6>` taggarna?', answer: 'Definierar rubriker på sex olika nivåer, där `<h1>` är den högsta/viktigaste och `<h6>` den lägsta.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg5', question: 'Vad gör `<a>`-taggen och vilket attribut är viktigast?', answer: 'Skapar en hyperlänk. Det viktigaste attributet är `href`, som anger länkens destination (URL).', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg6', question: 'Vad gör `<img>`-taggen och vilket attribut är viktigast?', answer: 'Bäddar in en bild. Det viktigaste attributet är `src`, som anger bildens sökväg (URL).', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg7', question: 'Vad används `<p>`-taggen till?', answer: 'Att definiera ett textstycke (paragraph).', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg8', question: 'Hur skapar man en punktlista?', answer: 'Med `<ul>` (unordered list) taggen, där varje listobjekt definieras med `<li>` (list item).', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg9', question: 'Hur skapar man en numrerad lista?', answer: 'Med `<ol>` (ordered list) taggen, där varje listobjekt definieras med `<li>`.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg10', question: 'Vad är ett HTML-attribut? Ge exempel.', answer: 'Ger extra information eller inställningar till ett HTML-element. Anges i start-taggen. Exempel: `href` i `<a>`, `src` och `alt` i `<img>`, `id`, `class`.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg11', question: 'Vad gör `<b>` eller `<strong>` taggarna?', answer: 'Gör texten fetstilt. `<strong>` indikerar semantiskt att texten är viktig.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg12', question: 'Vad gör `<i>` eller `<em>` taggarna?', answer: 'Gör texten kursiv. `<em>` indikerar semantiskt att texten ska betonas.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg13', question: 'Vad gör `<br>` taggen?', answer: 'Skapar en radbrytning inom ett textblock.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg14', question: 'Vad gör `<hr>` taggen?', answer: 'Skapar en horisontell linje, används ofta för att separera innehåll tematiskt.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},
  { id: 'html_beg15', question: 'Hur skriver man en HTML-kommentar?', answer: 'Med `<!--` och `-->`, t.ex. `<!-- Detta är en kommentar -->`. Den visas inte på webbsidan.', category: 'coding', subcategory: 'HTML', difficulty: 'beginner'},

  // --- HTML - Intermediate ---
  { id: 'html_int1', question: 'Vad är skillnaden mellan `<div>` och `<span>`?', answer: '`<div>` är ett blocknivåelement (skapar en egen rad/block). `<span>` är ett inline-element (används inom ett textflöde). Båda används för gruppering/styling.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int2', question: 'Varför är semantiska HTML-element viktiga?', answer: 'De ger struktur och mening åt innehållet, vilket förbättrar tillgänglighet (för skärmläsare) och sökmotoroptimering (SEO). Exempel: `<article>`, `<nav>`, `<header>`.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int3', question: 'Vilka attribut används med `<form>`-taggen?', answer: 'Vanliga attribut är `action` (URL dit datan skickas) och `method` (HTTP-metod, oftast `GET` eller `POST`).', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int4', question: 'Vad är skillnaden mellan `GET` och `POST` i formulär?', answer: '`GET`: data skickas i URL:en (synligt, begränsad mängd). `POST`: data skickas i HTTP-requestens body (dolt, större mängd).', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int5', question: 'Hur kopplar man en `<label>` till ett `<input>`-element?', answer: 'Genom att sätta `for`-attributet på `<label>` till samma värde som `id`-attributet på `<input>`-elementet.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int6', question: 'Vad är syftet med `<thead>`, `<tbody>` och `<tfoot>` i en tabell?', answer: 'De grupperar tabellens huvud-, kropp- och fotrader, vilket ger semantisk struktur och kan underlätta styling och skriptning.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int7', question: 'Vad gör `<meta name="viewport" content="...">` taggen?', answer: 'Styr hur webbsidan visas på olika enheter (särskilt mobiler), t.ex. sätter initial zoomnivå och bredd.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int8', question: 'Hur länkar man till en CSS-fil?', answer: 'Med `<link rel="stylesheet" href="stilmall.css">` inuti `<head>`-elementet.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int9', question: 'Vad är skillnaden mellan `id` och `class` attributen?', answer: '`id` måste vara unikt på hela sidan och används för att identifiera ett specifikt element. `class` kan användas på flera element för att gruppera dem för styling eller skriptning.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int10', question: 'Varför är `alt`-attributet viktigt för `<img>`?', answer: '1. Tillgänglighet: beskriver bilden för skärmläsare. 2. Visas om bilden inte kan laddas. 3. Kan hjälpa sökmotorer att förstå bildens innehåll.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int11', question: 'Vad är HTML-entiteter? Ge exempel.', answer: 'Sätt att representera reserverade tecken eller specialtecken. Exempel: `&lt;` (<), `&gt;` (>), `&amp;` (&), `&copy;` (©), `&nbsp;` (hårt mellanslag).', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int12', question: 'Vad är skillnaden mellan `<b>` och `<strong>`, samt `<i>` och `<em>`?', answer: '`<b>`/`<i>`: ren presentation (fet/kursiv). `<strong>`/`<em>`: semantisk betoning (viktig/emfas). Visuellt ser de oftast likadana ut, men betydelsen skiljer sig.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int13', question: 'Hur skapar man en dropdown-lista (select box)?', answer: 'Med `<select>`-taggen, där varje alternativ definieras med `<option>`-taggar inuti.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int14', question: 'Vad är `<fieldset>` och `<legend>`?', answer: '`<fieldset>` grupperar relaterade element i ett formulär. `<legend>` ger en rubrik (caption) till `<fieldset>`-gruppen.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},
  { id: 'html_int15', question: 'Vad är data-attribut (`data-*`)?', answer: 'Ett sätt att lagra anpassad data privat på standard HTML-element, som sedan kan nås med JavaScript via `element.dataset`.', category: 'coding', subcategory: 'HTML', difficulty: 'intermediate'},

  // --- HTML - Advanced ---
  { id: 'html_adv1', question: 'Förklara ARIA-roller och -attribut. Ge exempel.', answer: 'Roller (`role="button"`, `role="navigation"`) definierar elementets syfte. Attribut (`aria-label`, `aria-hidden`, `aria-required`) ger mer information till hjälpmedel.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv2', question: 'Vad är fördelarna och nackdelarna med `<iframe>`?', answer: 'Fördelar: bädda in externt innehåll, isolering. Nackdelar: säkerhetsrisker (om innehållet ej är betrott), prestandapåverkan, kan vara dåligt för SEO/tillgänglighet.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv3', question: 'Hur fungerar HTML5 Canvas API:et?', answer: 'Ger ett ritområde (`<canvas>`) och ett JavaScript API (drawing context, oftast 2D) för att rita former, bilder, text och skapa animationer programmatiskt.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv4', question: 'Vad är fördelarna med SVG jämfört med rastergrafik (som PNG/JPG)?', answer: 'SVG är vektorgrafik: skalbart utan kvalitetsförlust, mindre filstorlek för enkla former, kan manipuleras med CSS/JS, text är sökbar/indexerbar.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv5', question: 'Vilka är de tre huvudteknologierna bakom Web Components?', answer: '1. Custom Elements (definiera egna HTML-taggar). 2. Shadow DOM (inkapsla elementets DOM/CSS). 3. HTML Templates (`<template>`, `<slot>`) (återanvändbara mark-up strukturer).', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'advanced'},
  { id: 'html_adv6', question: 'Vad är `picture`-elementet och när används det?', answer: 'Tillåter att specificera flera bildkällor (`<source>`) för olika skärmstorlekar, upplösningar eller format, så att webbläsaren kan välja den mest lämpliga. Används för responsiv bildhantering.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv7', question: 'Vad är `srcset`-attributet på `<img>`?', answer: 'Tillåter att ange en lista med bildkällor och deras storlekar (t.ex. `srcset="bild-s.jpg 500w, bild-l.jpg 1000w"`), så webbläsaren kan välja den bästa baserat på skärmstorlek/upplösning.', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv8', question: 'Vad är HTML Microdata och RDFa Lite?', answer: 'Sätt att bädda in strukturerad data (semantisk information) direkt i HTML-koden för att beskriva innehållet (t.ex. personer, händelser, produkter) för maskiner (t.ex. sökmotorer).', category: 'coding', subcategory: 'HTML', difficulty: 'advanced'},
  { id: 'html_adv9', question: 'Vad är skillnaden mellan `defer` och `async` attributen på `<script>`-taggar?', answer: '`async`: skriptet laddas asynkront och körs så snart det är klart (kan blockera rendering). `defer`: skriptet laddas asynkront men körs först efter att HTML-dokumentet har parsats klart (blockerar ej).', category: 'coding', subcategory: 'Webbutveckling - Frontend', difficulty: 'advanced'},
  { id: 'html_adv10', question: 'Vad är Content Security Policy (CSP)?', answer: 'En säkerhetsmekanism (oftast definierad i HTTP-header) som hjälper till att förhindra cross-site scripting (XSS) och andra kodinjektionsattacker genom att specificera vilka resurser webbläsaren får ladda.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'advanced'},

  // --- Python - Beginner ---
  { id: 'py1', question: 'Vad är Python?', answer: 'Ett tolkat, högnivå-, allmänt programmeringsspråk känt för sin tydliga syntax och läsbarhet.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py2', question: 'Vad är skillnaden mellan lista `[]` och tuple `()`?', answer: 'Listor (`list`) är föränderliga (mutable) - element kan ändras, läggas till, tas bort. Tupler (`tuple`) är oföränderliga (immutable) - kan inte ändras efter skapandet.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py3', question: 'Hur definierar man en funktion i Python?', answer: 'Med `def`-nyckelordet följt av funktionsnamn, parenteser för parametrar, och ett kolon. Koden inuti funktionen måste vara indenterad.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py4', question: 'Vad är en dictionary (`dict`)?', answer: 'En samling av key-value-par, där varje nyckel är unik. Skapas med `{}`. Ordningen är garanterad i Python 3.7+.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py5', question: 'Hur skriver man en `if`-`else`-sats i Python?', answer: '`if condition:`\n  `  # kod om sant`\n`else:`\n  `  # kod om falskt`\nIndentering är avgörande.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg6', question: 'Vad gör `print()`?', answer: 'Skriver ut det som finns inom parenteserna till konsolen/terminalen.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg7', question: 'Hur skriver man en kommentar i Python?', answer: 'Allt efter tecknet `#` på en rad ignoreras av interpretatorn.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg8', question: 'Vad är en sträng (`str`)?', answer: 'En sekvens av tecken (text), omgiven av enkla (\\`\'\\`) eller dubbla (\\`"\\`) citattecken.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg9', question: 'Hur loopar man igenom en lista `my_list`?', answer: 'Med en `for`-loop: `for item in my_list:`', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg10', question: 'Vad returnerar `len(my_list)`?', answer: 'Antalet element i listan `my_list`.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg11', question: 'Vad är ett heltal (`int`)?', answer: 'Ett helt tal utan decimaler (t.ex. `10`, `-5`, `0`).', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg12', question: 'Vad är ett flyttal (`float`)?', answer: 'Ett tal med decimaler (t.ex. `3.14`, `-0.5`).', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg13', question: 'Hur konverterar man en sträng till ett heltal?', answer: 'Med `int()`, t.ex. `nummer = int("123")`.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg14', question: 'Vad gör `input("Ange namn: ")`?', answer: 'Visar texten "Ange namn: " och väntar på att användaren skriver något och trycker Enter. Returnerar det användaren skrev som en sträng.', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},
  { id: 'py_beg15', question: 'Hur jämför man om två värden är lika?', answer: 'Med dubbla likhetstecken `==` (t.ex. `if x == 5:`).', category: 'coding', subcategory: 'Python', difficulty: 'beginner'},

  // --- Python - Intermediate ---
  { id: 'py-int1', question: 'Vad är skillnaden mellan `append()` och `extend()` för listor?', answer: '`append(x)` lägger till `x` som ett *enda* element i slutet. `extend(iterable)` lägger till *alla* element från `iterable` i slutet.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py-int2', question: 'Vad är en Python-modul och hur importerar man den?', answer: 'En `.py`-fil med kod. Importeras med `import modulnamn` eller `from modulnamn import funktion/klass`.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int3', question: 'Vad gör `try...except`-blocket?', answer: 'Fångar upp och hanterar körningsfel (exceptions). Koden i `try`-blocket körs. Om ett fel uppstår, körs koden i motsvarande `except`-block.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int4', question: 'Vad är list comprehension? Ge ett exempel.', answer: 'Ett kompakt sätt att skapa listor. Exempel: `squares = [x**2 for x in range(10)]` (skapar lista med kvadraterna 0-9).', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int5', question: 'Vad är en klass och ett objekt i Python?', answer: 'Klass: en mall/ritning för att skapa objekt (definierar attribut och metoder). Objekt: en specifik instans av en klass.', category: 'coding', subcategory: 'OOP', difficulty: 'intermediate'},
  { id: 'py_int6', question: 'Vad är `__init__`-metoden?', answer: 'Konstruktormetoden i en klass. Anropas automatiskt när ett nytt objekt skapas, används för att initialisera objektets attribut (ofta med `self`).', category: 'coding', subcategory: 'OOP', difficulty: 'intermediate'},
  { id: 'py_int7', question: 'Hur läser man innehållet från en textfil?', answer: 'Med `with open("fil.txt", "r") as f:` (säkerställer att filen stängs). Sedan t.ex. `data = f.read()` eller `lines = f.readlines()`.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int8', question: 'Vad är `*args` och `**kwargs`?', answer: 'Tillåter en funktion att ta emot ett variabelt antal argument. `*args` samlar positionella argument i en tuple. `**kwargs` samlar nyckelordsargument i en dictionary.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int9', question: 'Vad är en lambda-funktion?', answer: 'En liten, anonym funktion skapad med `lambda`. Används ofta där en enkel funktion behövs som argument (t.ex. i `sort`, `map`). `lambda arguments: expression`.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int10', question: 'Vad är `pip` och ett virtuellt miljö (virtual environment)?', answer: '`pip`: pakethanterare för Python. Virtuell miljö: isolerad Python-installation för ett projekt, undviker paketkonflikter.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int11', question: 'Vad är skillnaden mellan `is` och `==`?', answer: '`==` jämför om värdena är lika. `is` jämför om två variabler refererar till exakt samma objekt i minnet.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int12', question: 'Vad är en `set` i Python?', answer: 'En oordnad samling av unika element. Användbar för att ta bort duplicater och utföra mängdoperationer (union, snitt). Skapas med `{}` (men inte tomma) eller `set()`.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int13', question: 'Hur fungerar slicing av listor/strängar?', answer: 'Ger en delsekvens. `my_list[start:stop:step]`. `start` inkluderas, `stop` exkluderas. Negativa index räknas från slutet.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int14', question: 'Vad är F-strängar (formatted string literals)?', answer: 'Ett sätt att bädda in uttryck i strängar (från Python 3.6+). Ex: `f"Namn: {name}, Ålder: {age}"`.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},
  { id: 'py_int15', question: 'Vad är `pass`-satsen?', answer: 'En null-operation. Gör ingenting. Används som platshållare där syntaxen kräver ett block men ingen kod behövs.', category: 'coding', subcategory: 'Python', difficulty: 'intermediate'},

  // --- Python - Advanced ---
  { id: 'py-adv1', question: 'Vad är en decorator?', answer: 'En funktion som tar en annan funktion som input, lägger till någon form av funktionalitet och returnerar den modifierade (eller ursprungliga) funktionen. Används ofta med `@decorator`-syntax.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py-adv2', question: 'Förklara GIL i CPython.', answer: 'Global Interpreter Lock. En mutex som skyddar åtkomst till Python-objekt, vilket gör att endast en tråd kan exekvera Python bytecode åt gången inom en process. Begränsar äkta parallellism för CPU-bundna trådar.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv3', question: 'Vad är en generator och fördelen med dem?', answer: 'En funktion som använder `yield` för att producera en sekvens av värden över tid. Fördel: minneseffektivt, genererar värden "lättjefullt" (on demand).', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv4', question: 'Vad är syftet med `with`-satsen (context managers)?', answer: 'Säkerställer korrekt hantering av resurser (t.ex. filer, lås) genom att garantera att setup-kod (`__enter__`) och teardown-kod (`__exit__`) körs, även om fel uppstår.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv5', question: 'Skillnad mellan shallow copy och deep copy (`copy`-modulen)?', answer: 'Shallow (`copy.copy()`): skapar nytt ytterobjekt, men inre objekt är referenser till originalets. Deep (`copy.deepcopy()`): skapar rekursivt nya kopior av alla objekt.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv6', question: 'Vad är `asyncio` och när är det lämpligt?', answer: 'Bibliotek för asynkron programmering med `async`/`await`. Lämpligt för I/O-bundna uppgifter (nätverk, filhantering) där programmet kan göra annat medan det väntar.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv7', question: 'Vad är deskriptorprotokollet?', answer: 'Definierar hur attributåtkomst hanteras. Objekt med `__get__`, `__set__` eller `__delete__` metoder är deskriptorer. Används för t.ex. `@property`, `@staticmethod`.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv8', question: 'Vad är en metaclass?', answer: 'En klass vars instanser är klasser. Standardmetaklassen är `type`. Tillåter anpassning av hur klasser skapas (t.ex. validering, automatisk registrering).', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv9', question: 'Hur fungerar `@property`-decoratern?', answer: 'Omvandlar en metod i en klass till ett "managed attribute". Tillåter att definiera getter-, setter- och deleter-logik för ett attribut.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv10', question: 'Vad är Cython och när används det?', answer: 'Ett superset av Python som även stöder C-datatayper. Kompileras till C-kod för att skapa snabba Python-extensioner, ofta för prestandakritiska delar.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv11', question: 'Vad är skillnaden mellan en iterator och en iterable?', answer: 'Iterable: ett objekt som kan loopas över (har `__iter__` eller `__getitem__`). Iterator: ett objekt som håller reda på tillståndet i iterationen (har `__next__`). `iter()` ger iteratorn från en iterable.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv12', question: 'Vad är `__slots__` i en klass?', answer: 'Ett sätt att explicit deklarera vilka instansattribut som är tillåtna. Kan spara minne (ingen `__dict__` skapas) och snabba upp attributåtkomst något.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv13', question: 'Vad är monkey patching?', answer: 'Att dynamiskt modifiera eller utöka kod (t.ex. en klass eller modul) vid körning. Kan vara användbart men också riskabelt och göra koden svårförståelig.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv14', question: 'Vad är MRO (Method Resolution Order)?', answer: 'Ordningen i vilken Python söker efter metoder i en klasshierarki vid multipelt arv. Använder C3-lineariseringsalgoritmen.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},
  { id: 'py_adv15', question: 'Vad är ett type hint i Python?', answer: 'Annotationer (från Python 3.5+) som anger förväntade datatyper för variabler, funktionsparametrar och returvärden. Kontrolleras ej vid körning men används av statiska analysverktyg.', category: 'coding', subcategory: 'Python', difficulty: 'advanced'},

  // --- Python - Expert ---
  { id: 'py-ex1', question: 'Vad är en metaclass och hur skapar man en egen?', answer: 'En klass vars instanser är klasser. Skapas genom att ärva från `type` och implementera `__new__` och/eller `__init__` för att modifiera klass-skapandet.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex2', question: 'Förklara Pythons datamodell och specialmetoder (`__metod__`).', answer: 'Definierar hur objekt interagerar med Pythons inbyggda funktioner och syntax. Specialmetoder (dunder methods) implementerar protokoll för t.ex. iteration (`__iter__`), aritmetik (`__add__`), attributåtkomst (`__getattr__`).', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex3', question: 'Beskriv CPythons garbage collector (ref counting + cyclic GC).', answer: 'Primärt referensräkning (objekt tas bort när räknaren når noll). Kompletteras med en cyklisk GC som periodiskt letar efter och bryter referenscykler (objekt som refererar till varandra).', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex4', question: 'Vad är Abstract Base Classes (ABCs) och varför använda dem?', answer: 'Definierar ett formellt gränssnitt med `@abstractmethod`. Säkerställer att subklasser implementerar nödvändig funktionalitet. Använder `abc`-modulen.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex5', question: 'Hur kan man kringgå GIL för äkta CPU-parallellism?', answer: 'Använda `multiprocessing`-modulen (separata processer med eget minne), använda C-extensioner som släpper GIL, eller använda alternativa Python-implementationer (Jython, IronPython, PyPy-STM).', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex6', question: 'Förklara Method Resolution Order (MRO) och C3-linearisering.', answer: 'Algoritmen Python använder för att bestämma sökordningen för metoder vid multipelt arv. Säkerställer monotonitet och lokal precedens.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex7', question: 'Vad är skillnaden mellan `__new__` och `__init__` och när används `__new__`?', answer: '`__new__`: skapar och returnerar instansen (klassmetod). `__init__`: initialiserar den skapade instansen. `__new__` används främst vid arv från oföränderliga typer eller för att implementera singletons/metaklasser.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex8', question: 'Hur fungerar `async`/`await` och event loopen i `asyncio`?', answer: '`async def` skapar en coroutine. `await` pausar coroutinen och lämnar tillbaka kontrollen till event loopen, som kan köra andra tasks. När den awaitade operationen är klar, återupptas coroutinen.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex9', question: 'Vad är PEP 8?', answer: 'Style Guide for Python Code. Specificerar kodningskonventioner för läsbarhet och konsistens (indentering, namngivning, radlängd etc.).', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex10', question: 'Vad är WSGI och ASGI?', answer: 'WSGI (Web Server Gateway Interface): standard för synkrona Python webbappar. ASGI (Asynchronous Server Gateway Interface): efterföljare som stöder asynkrona appar (t.ex. WebSockets).', category: 'coding', subcategory: 'Webbutveckling - Backend', difficulty: 'expert'},
  { id: 'py_ex11', question: 'Vad är en memory view?', answer: 'Ett sätt att komma åt minnesbufferten för ett objekt (t.ex. bytes, bytearray) utan att skapa en kopia. Effektivt för stora datamängder.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex12', question: 'Vad är CFFI (C Foreign Function Interface)?', answer: 'Ett bibliotek för att anropa C-kod från Python, ofta enklare att använda än att skriva fullständiga C-extensioner.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex13', question: 'Vad är en disassembler (`dis`-modulen)?', answer: 'Verktyg för att inspektera Python bytecode, dvs. de lågnivåinstruktioner som Python-interpretatorn faktiskt exekverar.', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex14', question: 'Vad är `@functools.lru_cache`?', answer: 'En decorator som implementerar memoization för en funktion, cachar resultaten för nyligen använda argument (Least Recently Used cache).', category: 'coding', subcategory: 'Python', difficulty: 'expert'},
  { id: 'py_ex15', question: 'Vad är skillnaden mellan concurrency och parallelism?', answer: 'Concurrency: hantera flera uppgifter samtidigt (kan vara interleaved på en kärna). Parallelism: utföra flera uppgifter exakt samtidigt (kräver flera kärnor). GIL begränsar parallelism i CPython.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},

  // --- General Coding - Intermediate ---
  { id: 'code_int6', question: 'Vad är ett API?', answer: 'Application Programming Interface. En uppsättning regler och definitioner som låter olika mjukvarusystem kommunicera med varandra.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'intermediate'},
  { id: 'code_int7', question: 'Vad är Git?', answer: 'Ett distribuerat versionshanteringssystem som spårar ändringar i kodfiler och underlättar samarbete mellan utvecklare.', category: 'coding', subcategory: 'Versionshantering', difficulty: 'intermediate'},
  { id: 'code_int10', question: 'Vad är OOP?', answer: 'Objektorienterad programmering. Ett paradigm baserat på "objekt" som innehåller data (attribut) och kod (metoder). Principer: inkapsling, arv, polymorfism.', category: 'coding', subcategory: 'OOP', difficulty: 'intermediate'},
  { id: 'code_int11', question: 'Vad är en klass?', answer: 'En mall eller ritning som används för att skapa objekt inom OOP.', category: 'coding', subcategory: 'OOP', difficulty: 'intermediate'},
  { id: 'code_int12', question: 'Vad är en databas?', answer: 'En strukturerad samling data som lagras elektroniskt och kan hanteras och hämtas effektivt.', category: 'coding', subcategory: 'Databaser', difficulty: 'intermediate'},
  { id: 'code_int13', question: 'Vad är SQL?', answer: 'Structured Query Language. Standardspråket för att kommunicera med och hantera data i relationella databaser.', category: 'coding', subcategory: 'Databaser', difficulty: 'intermediate'},
  { id: 'code_int15', question: 'Vad är skillnaden mellan HTTP och HTTPS?', answer: 'HTTPS (Secure) använder kryptering (SSL/TLS) för att skydda kommunikationen mellan klient och server, till skillnad från vanlig HTTP.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'intermediate'},
  { id: 'code_int16', question: 'Vad är ett ramverk (framework)?', answer: 'En återanvändbar uppsättning bibliotek, verktyg och konventioner som ger en grundstruktur för att bygga applikationer (t.ex. React, Django, Angular).', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'intermediate'},
  { id: 'code_int17', question: 'Vad är ett bibliotek (library)?', answer: 'En samling förskriven kod (funktioner, klasser) som utvecklare kan importera och använda för specifika uppgifter (t.ex. NumPy, Lodash).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'intermediate'},

  // --- General Coding - Advanced ---
  { id: 'ai1', question: 'Vad är maskininlärning (ML)?', answer: 'Ett delområde inom AI där algoritmer "lär" sig mönster från data för att göra prediktioner eller fatta beslut utan att vara explicit programmerade.', category: 'coding', subcategory: 'AI/ML', difficulty: 'advanced'},
  { id: 'ai2', question: 'Vad är skillnaden mellan supervised och unsupervised learning?', answer: 'Supervised: lär sig från märkta data (input -> känd output). Unsupervised: lär sig från omärkta data (hitta struktur, t.ex. klustring).', category: 'coding', subcategory: 'AI/ML', difficulty: 'advanced'},
  { id: 'ai3', question: 'Vad är ett artificiellt neuralt nätverk (ANN)?', answer: 'En beräkningsmodell inspirerad av biologiska neurala nätverk, bestående av lager av sammankopplade noder (neuroner) som bearbetar information.', category: 'coding', subcategory: 'AI/ML', difficulty: 'advanced'},
  { id: 'ai4', question: 'Vad är deep learning?', answer: 'En typ av ML som använder djupa neurala nätverk (många lager) för att lära sig komplexa representationer och hierarkier av features från rådata.', category: 'coding', subcategory: 'AI/ML', difficulty: 'advanced'},
  { id: 'ai5', question: 'Vad är overfitting och underfitting?', answer: 'Overfitting: modellen lär sig träningsdatan för bra (inklusive brus) och generaliserar dåligt till ny data. Underfitting: modellen är för enkel och fångar inte de underliggande mönstren.', category: 'coding', subcategory: 'AI/ML', difficulty: 'advanced'},
  { id: 'code_adv7', question: 'Vad är RESTful API?', answer: 'Ett API som följer principerna för REST (Representational State Transfer), t.ex. stateless, klient-server, cachable, enhetligt gränssnitt (använder HTTP-metoder på resurser).', category: 'coding', subcategory: 'Webbutveckling - Backend', difficulty: 'advanced'},
  { id: 'code_adv8', question: 'Vad är WebSockets?', answer: 'Ett kommunikationsprotokoll som tillåter full duplex (tvåvägs) kommunikation i realtid över en enda TCP-anslutning mellan klient och server.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'advanced'},
  { id: 'code_adv9', question: 'Vad är dependency injection (DI)?', answer: 'Ett designmönster där ett objekts beroenden "injiceras" utifrån istället för att objektet skapar dem själv. Främjar lös koppling och testbarhet.', category: 'coding', subcategory: 'OOP', difficulty: 'advanced'},
  { id: 'code_adv10', question: 'Nämn några typer av NoSQL-databaser.', answer: 'Dokumentdatabaser (MongoDB), Key-value stores (Redis), Kolumnfamiljedatabaser (Cassandra), Grafdatabaser (Neo4j).', category: 'coding', subcategory: 'Databaser', difficulty: 'advanced'},
  { id: 'code_adv11', question: 'Vad är en container (t.ex. Docker)?', answer: 'En lättviktig, fristående, exekverbar paketering av mjukvara som inkluderar allt som behövs för att köra den: kod, körtidsmiljö, systemverktyg, bibliotek.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'advanced'},
  { id: 'code_adv12', question: 'Vad är fördelarna med microservices-arkitektur?', answer: 'Oberoende deploy/skalning, teknologisk mångfald, mindre kodbaser per tjänst, teamautonomi. Nackdelar: ökad komplexitet (nätverk, distribution).', category: 'coding', subcategory: 'Webbutveckling - Backend', difficulty: 'advanced'},
  { id: 'code_adv13', question: 'Vad beskriver Big O notation?', answer: 'En algoritms asymptotiska övre gräns för resursförbrukning (oftast tid eller minne) när indatastorleken växer mot oändligheten.', category: 'coding', subcategory: 'Algoritmer', difficulty: 'advanced'},
  { id: 'code_adv14', question: 'Vad är de tre stegen i Test-Driven Development (TDD)?', answer: '1. Red: Skriv ett test som misslyckas. 2. Green: Skriv minimal kod för att få testet att passera. 3. Refactor: Förbättra koden utan att ändra dess externa beteende.', category: 'coding', subcategory: 'Testning', difficulty: 'advanced'},
  { id: 'code_adv15', question: 'Nämn SOLID-principerna.', answer: 'Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.', category: 'coding', subcategory: 'OOP', difficulty: 'advanced'},
  { id: 'code_adv16', question: 'Vad är ett ORM-verktyg?', answer: 'Object-Relational Mapper. Ett bibliotek som översätter mellan objekt i programmeringsspråket och tabeller/rader i en relationell databas (t.ex. SQLAlchemy, Entity Framework).', category: 'coding', subcategory: 'Databaser', difficulty: 'advanced'},
  { id: 'code_adv17', question: 'Förklara stack och heap minne.', answer: 'Stack: används för statisk allokering (funktionsanrop, lokala variabler), snabb LIFO-struktur. Heap: används för dynamisk allokering (objekt skapade vid körning), mer flexibel men långsammare allokering/deallokering.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'advanced'},
  { id: 'code_adv18', question: 'Hur fungerar en hash-tabell?', answer: 'Använder en hashfunktion för att mappa nycklar till index i en array (tabell). Kollisioner (när olika nycklar hashar till samma index) hanteras med tekniker som chaining eller open addressing.', category: 'coding', subcategory: 'Datastrukturer', difficulty: 'advanced'},
  { id: 'code_adv19', question: 'Vad är garbage collection?', answer: 'Automatisk minneshantering där körtidsmiljön identifierar och frigör minne som inte längre är refererat eller nåbart av programmet.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'advanced'},
  { id: 'code_adv20', question: 'Vad är syftet med CI/CD?', answer: 'Continuous Integration/Continuous Deployment/Delivery. Automatisera byggande, testning och driftsättning av kod för att snabba upp utvecklingscykeln, minska fel och öka tillförlitligheten.', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'advanced'},

  // --- General Coding - Expert ---
  { id: 'code_ex3', question: 'Vad är skillnaden mellan processer och trådar?', answer: 'Process: oberoende exekveringsenhet med eget minnesutrymme. Tråd: exekveringsenhet inom en process, delar minnesutrymme med andra trådar i samma process.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex4', question: 'Förklara CAP-teoremet.', answer: 'Ett distribuerat datalager kan endast garantera två av tre egenskaper samtidigt: Consistency (alla noder ser samma data samtidigt), Availability (alla requests får svar), Partition Tolerance (systemet fungerar trots nätverksproblem).', category: 'coding', subcategory: 'Databaser', difficulty: 'expert'},
  { id: 'code_ex5', question: 'Vilka är grundprinciperna i funktionell programmering?', answer: 'Rena funktioner (inga sidoeffekter, samma input ger samma output), immutabilitet (data ändras inte), funktioner som förstaklass citoyens, undvikande av delat tillstånd.', category: 'coding', subcategory: 'Funktionell Programmering', difficulty: 'expert'},
  { id: 'code_ex6', question: 'Vad innebär idempotens för ett API-anrop?', answer: 'Att göra samma anrop flera gånger har samma effekt som att göra det en gång. Viktigt för t.ex. `PUT` och `DELETE` för att hantera nätverksfel/retries.', category: 'coding', subcategory: 'Webbutveckling - Backend', difficulty: 'expert'},
  { id: 'code_ex7', question: 'Vad är en Bloom filter och dess användningsområden?', answer: 'Probabilistisk datastruktur för att snabbt testa medlemskap i en mängd. Kan ge falska positiva, aldrig falska negativa. Används t.ex. i databaser, nätverksroutrar för att undvika onödiga lookups.', category: 'coding', subcategory: 'Datastrukturer', difficulty: 'expert'},
  { id: 'code_ex8', question: 'Beskriv Actor-modellen.', answer: 'Konkurrensmodell baserad på "aktörer" som kommunicerar asynkront via meddelanden. Varje aktör har eget tillstånd och bearbetar meddelanden sekventiellt. Bra för feltolerans och skalbarhet.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex9', question: 'Jämför stark/svag och statisk/dynamisk typning.', answer: 'Stark/Svag: grad av implicit typomvandling (stark = mindre). Statisk/Dynamisk: när typkontroll sker (statisk = kompilering, dynamisk = körning).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex10', question: 'Vad är Raft-konsensusalgoritmen?', answer: 'Algoritm för att uppnå konsensus (överenskommelse) i ett distribuerat system, designad för att vara mer förståelig än Paxos. Använder ledarval och replikerad logg.', category: 'coding', subcategory: 'Algoritmer', difficulty: 'expert'},
  { id: 'code_ex11', question: 'Vad är homomorf kryptering?', answer: 'Krypteringsschema som tillåter beräkningar att utföras direkt på krypterad data utan att först dekryptera den.', category: 'coding', subcategory: 'Algoritmer', difficulty: 'expert'}, // Could be Security
  { id: 'code_ex12', question: 'Vad är Byzantine Fault Tolerance (BFT)?', answer: 'Förmågan hos ett distribuerat system att nå konsensus och fungera korrekt även om vissa komponenter fallerar eller agerar godtyckligt/illasinnat (Byzantine faults).', category: 'coding', subcategory: 'Algoritmer', difficulty: 'expert'},
  { id: 'code_ex13', question: 'Vad är en monad i FP?', answer: 'Ett designmönster (typkonstruktor + två operationer: unit/return, bind/flatMap) för att strukturera beräkningar, ofta för att hantera sidoeffekter, kontext eller asynkronitet på ett rent sätt.', category: 'coding', subcategory: 'Funktionell Programmering', difficulty: 'expert'},
  { id: 'code_ex14', question: 'Hur skiljer sig en kompilator från en interpretator?', answer: 'Kompilator: översätter hela källkoden till maskinkod/bytekod *innan* körning. Interpretator: läser och exekverar källkoden rad för rad (eller statement för statement) *under* körning.', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex15', question: 'Jämför olika concurrency-modeller.', answer: 'Trådar (delat minne, låsning/race conditions). Event loop + callbacks/promises/async-await (icke-blockerande I/O, en tråd). Actors (isolerat tillstånd, meddelanden). CSP (kommunicerande sekventiella processer).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex16', question: 'Vad är en vektordatabas?', answer: 'Databassystem optimerat för att lagra, indexera och söka i högdimensionella vektorer (embeddings), ofta via Approximate Nearest Neighbor (ANN) algoritmer. Används i AI/ML.', category: 'coding', subcategory: 'Databaser', difficulty: 'expert'},
  { id: 'code_ex17', question: 'Vad är event sourcing?', answer: 'Arkitekturmönster där alla tillståndsförändringar i en applikation sparas som en oföränderlig sekvens av händelser (events). Det nuvarande tillståndet kan återskapas genom att spela upp händelserna.', category: 'coding', subcategory: 'Webbutveckling - Backend', difficulty: 'expert'},
  { id: 'code_ex18', question: 'Vad är fördelarna med WebAssembly (Wasm)?', answer: 'Prestanda (nära nativ), portabilitet (körs i webbläsare/andra miljöer), säkerhet (sandboxed), språkoberoende (kompileringsmål).', category: 'coding', subcategory: 'Webbutveckling - Allmänt', difficulty: 'expert'},
  { id: 'code_ex19', question: 'Vad är en kvantdator och vad skiljer den?', answer: 'Använder kvantmekaniska fenomen (superposition, sammanflätning) och kvantbitar (qubits) för att utföra vissa beräkningar exponentiellt snabbare än klassiska datorer (t.ex. faktorisering).', category: 'coding', subcategory: 'Grundläggande Koncept', difficulty: 'expert'},
  { id: 'code_ex20', question: 'Vad är ett Zero-Knowledge Proof (ZKP)?', answer: 'Kryptografisk metod där en part (Prover) kan bevisa för en annan part (Verifier) att ett påstående är sant, utan att avslöja någon information utöver själva sanningen i påståendet.', category: 'coding', subcategory: 'Algoritmer', difficulty: 'expert'}, // Could be Security
];