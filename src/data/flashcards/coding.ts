// File: src/data/flashcards/coding.ts
import { Flashcard } from '@/types/flashcard';

export const codingFlashcards: Flashcard[] = [
  // --- JavaScript - Beginner ---
  { id: 'code1', question: 'Vad är en variabel i programmering?', answer: 'En variabel är en namngiven behållare för att lagra data eller värden i ett program.', category: 'coding', difficulty: 'beginner'},
  { id: 'code2', question: 'Vad är skillnaden mellan "==" och "===" i JavaScript?', answer: '"==" jämför värden (med typomvandling), "===" jämför både värde och datatyp.', category: 'coding', difficulty: 'beginner'},
  { id: 'code3', question: 'Vad är en array (lista) i JavaScript?', answer: 'En array är en ordnad samling av element (värden), ofta av samma eller olika datatyper, skapad med `[]`.', category: 'coding', difficulty: 'beginner'},
  { id: 'code4', question: 'Vad är en funktion i JavaScript?', answer: 'En funktion är ett namngivet kodblock som utför en specifik uppgift och kan återanvändas, definierad med `function` eller pilsyntax `=>`.', category: 'coding', difficulty: 'beginner'},
  { id: 'code5', question: 'Vad är en loop (slinga) i JavaScript (t.ex. `for`)?', answer: 'En `for`-loop används för att upprepa ett kodblock ett visst antal gånger. Ex: `for (let i=0; i<5; i++)`.', category: 'coding', difficulty: 'beginner'},
  { id: 'js_beg6', question: 'Hur skriver man en kommentar i JavaScript?', answer: 'Med `//` för enradskommentarer eller `/* ... */` för flerradskommentarer.', category: 'coding', difficulty: 'beginner'},
  { id: 'js_beg7', question: 'Vad gör `console.log()` i JavaScript?', answer: 'Skriver ut meddelanden eller värden till webbläsarens konsol, användbart för debugging.', category: 'coding', difficulty: 'beginner'},
  { id: 'js_beg8', question: 'Vad är skillnaden mellan `let`, `const` och `var`?', answer: '`let` och `const` (ES6) har blockscope. `const` kan inte omtilldelas. `var` har funktionsscope och bör undvikas i modern JS.', category: 'coding', difficulty: 'beginner'},
  { id: 'js_beg9', question: 'Hur kopplar man en JavaScript-fil till en HTML-fil?', answer: 'Med `<script src="filnamn.js"></script>`-taggen, oftast placerad innanför `<body>` eller `<head>`.' , category: 'coding', difficulty: 'beginner'},
  { id: 'js_beg10', question: 'Vad är ett "event" (händelse) i JavaScript?', answer: 'En händelse är något som inträffar i webbläsaren, t.ex. ett klick (`click`), en tangenttryckning (`keydown`), eller att sidan laddats (`load`).', category: 'coding', difficulty: 'beginner'},

  // --- JavaScript - Intermediate ---
  { id: 'code6', question: 'Vad är en React-komponent?', answer: 'En återanvändbar, självständig kodbit som renderar en del av användargränssnittet (UI).', category: 'coding', difficulty: 'intermediate'},
  { id: 'code7', question: 'Vad är "props" i React?', answer: 'Props (properties) är data som skickas från en föräldrakomponent till en barnkomponent (enkelriktat dataflöde).', category: 'coding', difficulty: 'intermediate'},
  { id: 'code8', question: 'Förklara React "state".', answer: 'State är data som hanteras internt inom en komponent och som kan ändras över tid, vilket triggar omrendering.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code9', question: 'Vad är "useEffect" i React?', answer: 'En Hook för att hantera sidoeffekter (t.ex. datahämtning, prenumerationer, DOM-manipulation) i funktionella komponenter.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code10', question: 'Vad är "virtuell DOM" i React?', answer: 'En representation av den faktiska DOM i minnet. React jämför den virtuella DOM:en för att effektivt uppdatera den riktiga DOM:en.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int6', question: 'Vad är DOM (Document Object Model)?', answer: 'En programmeringsgränssnitt för HTML- och XML-dokument. Det representerar sidans struktur som ett träd av objekt som JavaScript kan manipulera.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int7', question: 'Hur selekterar man ett HTML-element med JavaScript?', answer: 'Med metoder som `document.getElementById(\'id\')`, `document.querySelector(\'.klass\')` eller `document.querySelectorAll(\'tagg\')`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int8', question: 'Vad är skillnaden mellan `null` och `undefined` i JavaScript?', answer: '`undefined` betyder att en variabel har deklarerats men inte tilldelats ett värde. `null` är ett avsiktligt tilldelat värde som representerar "inget värde".', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int9', question: 'Vad är JSON (JavaScript Object Notation)?', answer: 'Ett lättviktsformat för datautbyte, baserat på JavaScripts objektsyntax, men är språkoberoende.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int10', question: 'Vad är en callback-funktion i JavaScript?', answer: 'En funktion som skickas som argument till en annan funktion och som är avsedd att köras senare, ofta efter en asynkron operation.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int11', question: 'Vad är "scope" i JavaScript?', answer: 'Scope bestämmer tillgängligheten (synligheten) av variabler. JavaScript har globalt scope, funktionsscope och blockscope (med let/const).', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int12', question: 'Vad är skillnaden mellan synkron och asynkron kod i JavaScript?', answer: 'Synkron kod exekveras sekventiellt. Asynkron kod (t.ex. med Promises, async/await) tillåter operationer (som nätverksanrop) att köras i bakgrunden utan att blockera huvudtråden.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int13', question: 'Vad är en Promise i JavaScript?', answer: 'Ett objekt som representerar det slutliga resultatet (eller felet) av en asynkron operation.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int14', question: 'Hur fungerar `this`-nyckelordet i JavaScript?', answer: 'Värdet på `this` bestäms av hur en funktion anropas (kontexten). Kan vara globala objektet, ett objekt, `undefined` (i strict mode), etc.', category: 'coding', difficulty: 'intermediate'},
  { id: 'js_int15', question: 'Vad är `map`, `filter` och `reduce` för arraymetoder?', answer: '`map` skapar en ny array genom att transformera varje element. `filter` skapar en ny array med element som uppfyller ett villkor. `reduce` reducerar arrayen till ett enda värde.', category: 'coding', difficulty: 'intermediate'},

  // --- JavaScript - Advanced ---
  { id: 'js_adv1', question: 'Förklara `async`/`await` i JavaScript.', answer: '`async` definierar en funktion som returnerar en Promise. `await` pausar exekveringen inuti en `async`-funktion tills en Promise har lösts.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv2', question: 'Vad är en closure (slutning) i JavaScript?', answer: 'En funktion som "minns" sitt yttre lexikaliska scope, även när den yttre funktionen har exekverats klart. Ger åtkomst till yttre variabler.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv3', question: 'Vad är prototypbaserat arv i JavaScript?', answer: 'Objekt kan ärva egenskaper och metoder direkt från andra objekt via en prototypkedja.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv4', question: 'Vad är "event loop" i JavaScript?', answer: 'En mekanism i JavaScripts körtidsmiljö som hanterar exekvering av kod, callbacks från asynkrona operationer (via callback queue/microtask queue) och rendering.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv5', question: 'Vad är skillnaden mellan `call`, `apply` och `bind`?', answer: 'Alla används för att sätta `this`-värdet i en funktion. `call` och `apply` anropar funktionen direkt (apply tar argument som array). `bind` returnerar en ny funktion med `this` bundet.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv6', question: 'Vad är hoisting i JavaScript?', answer: 'Mekanism där variabel- och funktionsdeklarationer (inte tilldelningar) flyttas till toppen av sitt scope under kompileringsfasen.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv7', question: 'Vad är Web Workers?', answer: 'Ett sätt att köra JavaScript i bakgrundstrådar, vilket förhindrar att tunga beräkningar blockerar huvudtråden och UI.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv8', question: 'Förklara begreppet "currying".', answer: 'En teknik där en funktion som tar flera argument omvandlas till en sekvens av funktioner som var och en tar ett enda argument.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv9', question: 'Vad är skillnaden mellan `localStorage` och `sessionStorage`?', answer: 'Båda lagrar key-value data i webbläsaren. `localStorage` består över sessioner. `sessionStorage` rensas när fliken/fönstret stängs.', category: 'coding', difficulty: 'advanced'},
  { id: 'js_adv10', question: 'Vad är Strict Mode (`"use strict";`)?', answer: 'Ett läge i JavaScript som inför striktare regler och felhantering, vilket hjälper till att skriva säkrare och mer robust kod.', category: 'coding', difficulty: 'advanced'},

  // --- JavaScript - Expert ---
  { id: 'code-ex1', question: 'Förklara begreppet "closure" i JavaScript.', answer: 'En closure är kombinationen av en funktion och dess omgivande tillstånd (lexikaliska miljö), vilket ger funktionen åtkomst till yttre variabler även efter att det yttre scopet avslutats.', category: 'coding', difficulty: 'expert'},
  { id: 'code-ex2', question: 'Vad är "event loop" i JavaScript?', answer: 'En mekanism som hanterar exekvering av kod, händelser och köade uppgifter (callbacks, promises) för att möjliggöra icke-blockerande asynkronitet i en entrådad miljö.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex3', question: 'Vad är generators (`function*`) i JavaScript?', answer: 'Specialfunktioner som kan pausas och återupptas. Använder `yield` för att returnera ett värde och pausa. Används för att skapa iteratorer.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex4', question: 'Vad är Proxies i JavaScript?', answer: 'Objekt som används för att definiera anpassat beteende för fundamentala operationer (t.ex. egenskapsåtkomst, tilldelning, funktionsanrop).', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex5', question: 'Vad är WeakMap och WeakSet?', answer: 'Samlingstyper där nycklar (WeakMap) eller värden (WeakSet) är svagt refererade, vilket innebär att de inte förhindrar garbage collection om inga andra referenser finns.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex6', question: 'Förklara hur JavaScripts minneshantering och garbage collection fungerar.', answer: 'JavaScript använder automatisk minneshantering. Garbage collector identifierar och frigör minne som inte längre är nåbart (ofta med mark-and-sweep algoritm).', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex7', question: 'Vad är Shadow DOM?', answer: 'En webbplattformsfunktion för att inkapsla DOM och CSS inom ett webbkomponent, vilket förhindrar konflikter med resten av sidan.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex8', question: 'Vad är Service Workers?', answer: 'Skript som körs i bakgrunden, separata från webbsidan. Möjliggör funktioner som offline-stöd, push-notiser och bakgrundssynkronisering.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex9', question: 'Vad är skillnaden mellan microtasks och macrotasks i event loopen?', answer: 'Microtasks (t.ex. promise callbacks) har högre prioritet och exekveras efter varje macrotask (t.ex. setTimeout, I/O) innan rendering.', category: 'coding', difficulty: 'expert'},
  { id: 'js_ex10', question: 'Vad är Tree Shaking?', answer: 'En process i moderna JavaScript-bundlers (som Webpack, Rollup) som eliminerar oanvänd kod (dead code) från det slutliga paketet för att minska storleken.', category: 'coding', difficulty: 'expert'},

  // --- HTML - Beginner ---
  { id: 'code_beg6', question: 'Vad är HTML?', answer: 'HTML (HyperText Markup Language) används för att strukturera innehållet på en webbsida.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg2', question: 'Vad är en HTML-tagg?', answer: 'Markörer som används för att definiera element på en webbsida, t.ex. `<p>` för ett stycke.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg3', question: 'Vad är skillnaden mellan `<head>` och `<body>`?', answer: '`<head>` innehåller metadata (titel, länkar till CSS). `<body>` innehåller det synliga innehållet på sidan.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg4', question: 'Vad gör `<h1>` till `<h6>` taggarna?', answer: 'Definierar rubriker på olika nivåer, där `<h1>` är den viktigaste.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg5', question: 'Vad gör `<a>`-taggen?', answer: 'Skapar en hyperlänk till en annan webbsida eller resurs (använder `href`-attributet).', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg6', question: 'Vad gör `<img>`-taggen?', answer: 'Visar en bild på webbsidan (använder `src`-attributet för bildkällan).', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg7', question: 'Vad gör `<p>`-taggen?', answer: 'Definierar ett textstycke.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg8', question: 'Vad gör `<ul>` och `<li>` taggarna?', answer: '`<ul>` skapar en oordnad (punkt-) lista. `<li>` definierar ett listobjekt inuti listan.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg9', question: 'Vad gör `<ol>` och `<li>` taggarna?', answer: '`<ol>` skapar en ordnad (numrerad) lista. `<li>` definierar ett listobjekt.', category: 'coding', difficulty: 'beginner'},
  { id: 'html_beg10', question: 'Vad är ett HTML-attribut?', answer: 'Ger extra information om ett HTML-element, anges inom start-taggen (t.ex. `href` i `<a>`, `src` i `<img>`).', category: 'coding', difficulty: 'beginner'},

  // --- HTML - Intermediate ---
  { id: 'html_int1', question: 'Vad är skillnaden mellan `<div>` och `<span>`?', answer: '`<div>` är ett blockelement (tar upp hela bredden). `<span>` är ett inline-element (tar bara upp nödvändigt utrymme). Används för gruppering och styling.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int2', question: 'Vad är semantiska HTML-element? Ge exempel.', answer: 'Element som beskriver sitt innehålls betydelse. Ex: `<header>`, `<footer>`, `<nav>`, `<article>`, `<section>`, `<aside>`. Förbättrar SEO och tillgänglighet.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int3', question: 'Vad är ett HTML-formulär (`<form>`)?', answer: 'Används för att samla in användardata. Innehåller element som `<input>`, `<textarea>`, `<select>`, `<button>`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int4', question: 'Vilka är några vanliga typer av `<input>`-element?', answer: '`text`, `password`, `email`, `number`, `date`, `checkbox`, `radio`, `submit`, `button`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int5', question: 'Vad är `<table>`, `<tr>`, `<th>` och `<td>`?', answer: 'Används för att skapa tabeller. `<table>`=tabellen, `<tr>`=tabellrad, `<th>`=tabellhuvudcell, `<td>`=tabellcell (data).', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int6', question: 'Vad är `DOCTYPE`-deklarationen?', answer: 'Anger vilken HTML-version dokumentet följer. `<!DOCTYPE html>` är för HTML5.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int7', question: 'Vad är `meta`-taggar i `<head>`?', answer: 'Ger metadata om HTML-dokumentet, t.ex. teckenkodning (`charset="UTF-8"`), beskrivning, nyckelord, viewport-inställningar.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int8', question: 'Hur bäddar man in en video eller ljudfil?', answer: 'Med `<video>` respektive `<audio>`-taggarna (HTML5), med `src`-attributet för filkällan.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int9', question: 'Vad är skillnaden mellan block- och inline-element?', answer: 'Blockelement (t.ex. `<p>`, `<h1>`, `<div>`) börjar på en ny rad och tar upp hela tillgängliga bredden. Inline-element (t.ex. `<a>`, `<span>`, `<img>`) tar bara upp nödvändigt utrymme och bryter inte raden.', category: 'coding', difficulty: 'intermediate'},
  { id: 'html_int10', question: 'Vad är `alt`-attributet för `<img>`-taggar?', answer: 'Ger en alternativ textbeskrivning av bilden. Viktigt för tillgänglighet (skärmläsare) och om bilden inte kan laddas.', category: 'coding', difficulty: 'intermediate'},

  // --- HTML - Advanced ---
  { id: 'html_adv1', question: 'Vad är ARIA (Accessible Rich Internet Applications)?', answer: 'En uppsättning attribut som kan läggas till HTML-element för att förbättra tillgängligheten för dynamiskt innehåll och avancerade UI-kontroller för hjälpmedelstekniker.', category: 'coding', difficulty: 'advanced'},
  { id: 'html_adv2', question: 'Vad är skillnaden mellan `<iframe>` och `<embed>`/`<object>`?', answer: '`<iframe>` bäddar in ett helt annat HTML-dokument. `<embed>`/`<object>` bäddar in externt innehåll som plugins (mindre vanligt idag).', category: 'coding', difficulty: 'advanced'},
  { id: 'html_adv3', question: 'Vad är HTML5 Canvas?', answer: 'Ett element som används för att rita grafik, animationer och spel dynamiskt med JavaScript.', category: 'coding', difficulty: 'advanced'},
  { id: 'html_adv4', question: 'Vad är SVG (Scalable Vector Graphics)?', answer: 'XML-baserat format för att beskriva tvådimensionell vektorgrafik. Skalbart utan kvalitetsförlust.', category: 'coding', difficulty: 'advanced'},
  { id: 'html_adv5', question: 'Vad är Web Components?', answer: 'En uppsättning teknologier (Custom Elements, Shadow DOM, HTML Templates) för att skapa återanvändbara, inkapslade UI-komponenter.', category: 'coding', difficulty: 'advanced'},

  // --- Python - Beginner ---
  { id: 'py1', question: 'Vad är Python?', answer: 'Ett populärt, tolkat högnivåspråk känt för sin läsbarhet och mångsidighet.', category: 'coding', difficulty: 'beginner'},
  { id: 'py2', question: 'Vad är skillnaden mellan lista `[]` och tuple `()` i Python?', answer: 'Lista är föränderlig (mutable), tuple är oföränderlig (immutable).', category: 'coding', difficulty: 'beginner'},
  { id: 'py3', question: 'Hur definierar man en funktion i Python?', answer: 'Med `def funktionsnamn(parametrar):`. Indentering är viktig.', category: 'coding', difficulty: 'beginner'},
  { id: 'py4', question: 'Vad är en dictionary (`dict`) i Python?', answer: 'En oordnad (Python < 3.7) / ordnad (Python >= 3.7) samling av key-value-par `{}`.', category: 'coding', difficulty: 'beginner'},
  { id: 'py5', question: 'Hur skriver man en `if`-sats i Python?', answer: 'Med `if villkor:` följt av indenterad kod. Kan följas av `elif villkor:` och `else:`.', category: 'coding', difficulty: 'beginner'},
  { id: 'py_beg6', question: 'Vad gör `print()`-funktionen i Python?', answer: 'Skriver ut värden till konsolen.', category: 'coding', difficulty: 'beginner'},
  { id: 'py_beg7', question: 'Hur skriver man en kommentar i Python?', answer: 'Med `#` i början av raden.', category: 'coding', difficulty: 'beginner'},
  { id: 'py_beg8', question: 'Vad är en sträng (`str`) i Python?', answer: 'En sekvens av tecken, omgiven av enkla (`\'`) eller dubbla (`"`) citattecken.', category: 'coding', difficulty: 'beginner'},
  { id: 'py_beg9', question: 'Hur gör man en `for`-loop i Python (t.ex. över en lista)?', answer: '`for element in lista:` följt av indenterad kod.', category: 'coding', difficulty: 'beginner'},
  { id: 'py_beg10', question: 'Vad är `len()`-funktionen?', answer: 'Returnerar antalet element i en sekvens (som en lista eller sträng).', category: 'coding', difficulty: 'beginner'},

  // --- Python - Intermediate ---
  { id: 'py-int1', question: 'Skillnad mellan `append()` och `extend()` för listor?', answer: '`append()` lägger till ett element (kan vara en lista). `extend()` lägger till alla element från en iterable.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py-int2', question: 'Vad är en Python-modul?', answer: 'En `.py`-fil med Python-kod (funktioner, klasser, variabler) som kan importeras och återanvändas i andra skript.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int3', question: 'Vad är `try...except`-blocket?', answer: 'Används för att fånga och hantera fel (exceptions) under körning utan att programmet kraschar.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int4', question: 'Vad är list comprehension?', answer: 'Ett kompakt sätt att skapa listor baserat på befintliga iterables. Ex: `[x*x for x in range(5) if x % 2 == 0]`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int5', question: 'Vad är skillnaden mellan en klass och ett objekt (instans) i Python?', answer: 'En klass är en mall/ritning. Ett objekt är en specifik instans skapad från klassen.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int6', question: 'Vad är `__init__`-metoden i en klass?', answer: 'En speciell metod (konstruktor) som anropas när ett nytt objekt av klassen skapas, används för att initialisera objektets attribut.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int7', question: 'Hur läser man från en fil i Python?', answer: 'Med `with open(\'filnamn.txt\', \'r\') as f:` följt av t.ex. `content = f.read()` eller iteration över `f`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int8', question: 'Vad är skillnaden mellan `*args` och `**kwargs` i funktionsdefinitioner?', answer: '`*args` samlar positionella argument i en tuple. `**kwargs` samlar nyckelordsargument i en dictionary.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int9', question: 'Vad är en lambda-funktion?', answer: 'En liten, anonym funktion definierad med `lambda` nyckelordet. Ex: `lambda x, y: x + y`.', category: 'coding', difficulty: 'intermediate'},
  { id: 'py_int10', question: 'Vad är `pip`?', answer: 'Pythons pakethanterare som används för att installera och hantera tredjepartsbibliotek och paket.', category: 'coding', difficulty: 'intermediate'},

  // --- Python - Advanced ---
  { id: 'py-adv1', question: 'Vad är en decorator i Python?', answer: 'En funktion som tar en annan funktion som argument, lägger till funktionalitet och returnerar den modifierade funktionen (ofta med `@`-syntax).', category: 'coding', difficulty: 'advanced'},
  { id: 'py-adv2', question: 'Förklara GIL (Global Interpreter Lock) i CPython.', answer: 'En mutex som gör att endast en tråd kan exekvera Python bytecode åt gången i en process, begränsar CPU-bunden parallellism.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv3', question: 'Vad är en generator i Python?', answer: 'En funktion som använder `yield` för att returnera en iterator, genererar värden ett i taget på begäran (minneseffektivt).', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv4', question: 'Vad är context managers (`with`-satsen)?', answer: 'Objekt som definierar metoder (`__enter__`, `__exit__`) för att hantera resurser (t.ex. filer, nätverksanslutningar) och säkerställa att de städas upp korrekt.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv5', question: 'Vad är skillnaden mellan shallow copy och deep copy?', answer: 'Shallow copy skapar ett nytt objekt men refererar till samma inre objekt. Deep copy skapar ett helt nytt objekt med nya kopior av alla inre objekt.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv6', question: 'Vad är `asyncio` i Python?', answer: 'Ett bibliotek för att skriva asynkron kod med `async`/`await`-syntax, baserat på en event loop. Bra för I/O-bundna uppgifter.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv7', question: 'Vad är deskriptorer i Python?', answer: 'Objekt som implementerar speciella metoder (`__get__`, `__set__`, `__delete__`) för att anpassa hur attribut hämtas, sätts eller tas bort.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv8', question: 'Vad är metaclasses i Python?', answer: 'Klasser vars instanser är klasser. `type` är standardmetaklassen. Tillåter anpassning av klass-skapande processen.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv9', question: 'Vad är `@property` decoratern?', answer: 'Används för att definiera metoder som kan kommas åt som attribut (getters), och eventuellt definiera setters och deleters.', category: 'coding', difficulty: 'advanced'},
  { id: 'py_adv10', question: 'Vad är Cython?', answer: 'Ett programmeringsspråk som gör det möjligt att skriva C-extensioner för Python. Kan kompilera Python-liknande kod till C för prestandaökningar.', category: 'coding', difficulty: 'advanced'},

  // --- Python - Expert ---
  { id: 'py-ex1', question: 'Vad är metaclasses i Python?', answer: 'Klasser vars instanser är klasser. `type` är standardmetaklassen. Tillåter anpassning av klass-skapande.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex2', question: 'Förklara Pythons datamodell (data model).', answer: 'Beskriver hur objekt beter sig via speciella metoder (`__metod__`) som implementerar protokoll för t.ex. iteration, operatorer, attributåtkomst.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex3', question: 'Diskutera Pythons minneshantering och garbage collection (reference counting + cyclic GC).', answer: 'CPython använder primärt reference counting. En cyklisk garbage collector körs periodiskt för att hitta och frigöra objekt i referenscykler.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex4', question: 'Vad är Abstract Base Classes (ABCs) i Python?', answer: 'Klasser som definierar ett gemensamt gränssnitt för en uppsättning subklasser, ofta med abstrakta metoder som måste implementeras. Använder `abc`-modulen.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex5', question: 'Vad är Global Interpreter Lock (GIL) och dess implikationer för multithreading?', answer: 'GIL i CPython tillåter bara en tråd att hålla kontroll över Python-interpretatorn åt gången, vilket begränsar prestandaförbättringar från multithreading för CPU-bundna uppgifter.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex6', question: 'Hur fungerar `super()` i Python, särskilt med multipelt arv?', answer: '`super()` ger tillgång till metoder i föräldraklasser enligt Method Resolution Order (MRO), vilket är viktigt för samarbetsvilliga metoder i komplexa arvshierarkier.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex7', question: 'Vad är skillnaden mellan `__new__` och `__init__`?', answer: '`__new__` är en statisk metod som ansvarar för att *skapa* instansen (returnerar den nya instansen). `__init__` ansvarar för att *initialisera* den redan skapade instansen.', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex8', question: 'Vad är coroutines i Python (`async def`)?', answer: 'Specialfunktioner definierade med `async def` som kan pausas (`await`) när de väntar på I/O eller andra coroutines. Körs av en event loop (t.ex. asyncio).', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex9', question: 'Vad är CPython, Jython, IronPython, PyPy?', answer: 'Olika implementationer av Python-språket. CPython (standard, i C), Jython (kör på JVM), IronPython (kör på .NET), PyPy (med JIT-kompilator).', category: 'coding', difficulty: 'expert'},
  { id: 'py_ex10', question: 'Vad är WSGI (Web Server Gateway Interface)?', answer: 'En standardiserad specifikation som beskriver hur webbservrar kommunicerar med Python-webbapplikationer/-ramverk.', category: 'coding', difficulty: 'expert'},

  // --- General Coding - Intermediate ---
  { id: 'code_int6', question: 'Vad är API (Application Programming Interface)?', answer: 'Ett gränssnitt som definierar hur olika mjukvarukomponenter ska interagera med varandra.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int7', question: 'Vad är Git och vad används det till?', answer: 'Git är ett distribuerat versionshanteringssystem för att spåra ändringar i kod och samarbeta i projekt.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int10', question: 'Vad är objektorienterad programmering (OOP)?', answer: 'Ett programmeringsparadigm baserat på konceptet "objekt", som kan innehålla data (attribut) och kod (metoder). Exempelprinciper: inkapsling, arv, polymorfism.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int11', question: 'Vad är en klass i OOP?', answer: 'En mall eller ritning för att skapa objekt. Den definierar objektets attribut och metoder.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int12', question: 'Vad är en databas?', answer: 'En organiserad samling av strukturerad information eller data, vanligtvis lagrad elektroniskt i ett datorsystem.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int13', question: 'Vad är SQL (Structured Query Language)?', answer: 'Ett standardspråk för att hantera och manipulera data i relationella databaser.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int15', question: 'Vad är skillnaden mellan HTTP och HTTPS?', answer: 'HTTPS (Hypertext Transfer Protocol Secure) är den säkra versionen av HTTP. Kommunikationen krypteras med SSL/TLS.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int16', question: 'Vad är en framework (ramverk) inom programmering?', answer: 'En uppsättning färdiga komponenter, verktyg och regler som underlättar utvecklingen av mjukvara genom att erbjuda en struktur.', category: 'coding', difficulty: 'intermediate'},
  { id: 'code_int17', question: 'Vad är ett library (bibliotek)?', answer: 'En samling förskriven kod (funktioner, klasser) som programmerare kan använda för att utföra specifika uppgifter utan att skriva koden själva.', category: 'coding', difficulty: 'intermediate'},

  // --- General Coding - Advanced ---
  { id: 'ai1', question: 'Vad är maskininlärning?', answer: 'Ett område inom AI där system lär sig från data för att identifiera mönster och fatta beslut utan explicit programmering.', category: 'coding', difficulty: 'advanced'},
  { id: 'ai2', question: 'Vad är skillnaden mellan övervakad och oövervakad inlärning?', answer: 'Övervakad använder märkta data (input + korrekt output). Oövervakad använder omärkta data för att hitta struktur.', category: 'coding', difficulty: 'advanced'},
  { id: 'ai3', question: 'Vad är ett neuralt nätverk?', answer: 'En beräkningsmodell inspirerad av hjärnans struktur, bestående av sammankopplade noder (neuroner) i lager.', category: 'coding', difficulty: 'advanced'},
  { id: 'ai4', question: 'Vad är djupinlärning (deep learning)?', answer: 'En typ av maskininlärning som använder djupa neurala nätverk (många lager) för att lära sig komplexa representationer från data.', category: 'coding', difficulty: 'advanced'},
  { id: 'ai5', question: 'Vad är en tränings-/testuppsättning?', answer: 'Data delas upp: träningsdata används för att träna modellen, testdata för att utvärdera dess prestanda på osedda data.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv7', question: 'Vad är REST (Representational State Transfer)?', answer: 'En arkitekturstil för webbtjänster som använder standard HTTP-metoder (GET, POST, PUT, DELETE) och fokuserar på resurser.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv8', question: 'Vad är WebSockets?', answer: 'Ett kommunikationsprotokoll som möjliggör tvåvägskommunikation i realtid mellan en klient och en server över en enda TCP-anslutning.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv9', question: 'Förklara begreppet "dependency injection".', answer: 'Ett designmönster där en komponents beroenden (andra objekt den behöver) tillhandahålls externt istället för att komponenten skapar dem själv.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv10', question: 'Vad är skillnaden mellan SQL och NoSQL-databaser?', answer: 'SQL-databaser är relationella (tabellbaserade) med ett fast schema. NoSQL-databaser är icke-relationella och erbjuder mer flexibla datamodeller (dokument, key-value, graf etc.).', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv11', question: 'Vad är Docker?', answer: 'En plattform för att utveckla, leverera och köra applikationer i isolerade miljöer som kallas containrar.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv12', question: 'Vad är microservices (mikrotjänster)?', answer: 'En arkitekturstil där en applikation struktureras som en samling små, oberoende och löst kopplade tjänster.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv13', question: 'Förklara begreppet "Big O notation".', answer: 'Big O notation används för att beskriva en algoritms tid- eller minneskomplexitet i förhållande till indatastorleken, fokuserat på det asymptotiska beteendet (värsta fallet).', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv14', question: 'Vad är testdriven utveckling (TDD)?', answer: 'En utvecklingsprocess där man först skriver ett automatiserat testfall som misslyckas, sedan skriver minimal kod för att få testet att passera, och slutligen refaktorerar koden.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv15', question: 'Vad är SOLID-principerna inom OOP?', answer: 'En uppsättning av fem designprinciper för att skapa mer förståelig, flexibel och underhållbar objektorienterad kod: Single Responsibility, Open/Closed, Liskov Substitution, Interface Segregation, Dependency Inversion.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv16', question: 'Vad är ORM (Object-Relational Mapping)?', answer: 'En teknik som konverterar data mellan objektsystem (som i OOP-språk) och relationella databaser, vilket låter utvecklare interagera med databasen via objekt.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv17', question: 'Vad är skillnaden mellan stack och heap i minneshantering?', answer: 'Stacken används för statisk minnesallokering (funktionsanrop, lokala variabler) med LIFO-principen. Heapet används för dynamisk minnesallokering (objekt skapade vid körning).', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv18', question: 'Vad är en hash-tabell (hash map)?', answer: 'En datastruktur som implementerar en associativ array (key-value par) genom att använda en hashfunktion för att beräkna ett index (en "hink") där ett värde kan hittas.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv19', question: 'Vad är "garbage collection"?', answer: 'En automatisk minneshanteringsprocess i vissa programmeringsspråk som identifierar och frigör minne som inte längre används av programmet.', category: 'coding', difficulty: 'advanced'},
  { id: 'code_adv20', question: 'Vad är CI/CD (Continuous Integration/Continuous Deployment)?', answer: 'En praxis inom mjukvaruutveckling där kodändringar automatiskt byggs, testas och (ofta) driftsätts kontinuerligt, vilket snabbar upp leveranscykeln.', category: 'coding', difficulty: 'advanced'},

  // --- General Coding - Expert ---
  { id: 'code_ex3', question: 'Vad är skillnaden mellan processer och trådar (threads)?', answer: 'Processer har separata minnesutrymmen, medan trådar inom samma process delar minnesutrymme. Trådar är lättviktigare att skapa och växla mellan.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex4', question: 'Förklara CAP-teoremet inom distribuerade system.', answer: 'CAP-teoremet säger att ett distribuerat system kan endast garantera två av tre egenskaper: Consistency (Konsistens), Availability (Tillgänglighet), Partition Tolerance (Partitionstolerans).', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex5', question: 'Vad är funktionell programmering (FP)?', answer: 'Ett programmeringsparadigm som behandlar beräkning som utvärdering av matematiska funktioner och undviker tillståndsförändringar och muterbar data. Betonar rena funktioner och immutabilitet.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex6', question: 'Förklara begreppet idempotens i samband med API:er.', answer: 'En operation är idempotent om den kan utföras flera gånger utan att resultatet ändras efter den första lyckade exekveringen (t.ex. HTTP PUT och DELETE).', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex7', question: 'Vad är en bloom filter?', answer: 'En probabilistisk datastruktur som används för att testa om ett element är medlem i en mängd. Kan ge falska positiva svar, men aldrig falska negativa.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex8', question: 'Diskutera Actor-modellen för samtidighet.', answer: 'En modell där "aktörer" är grundläggande enheter för beräkning. Varje aktör har ett tillstånd, kan ta emot meddelanden och skicka meddelanden till andra aktörer asynkront.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex9', question: 'Vad är skillnaden mellan stark och svag typning i programmeringsspråk?', answer: 'Stark typning förhindrar operationer mellan inkompatibla typer (kräver explicit konvertering). Svag typning tillåter implicit typomvandling.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex10', question: 'Förklara Raft-konsensusalgoritmen.', answer: 'En konsensusalgoritm för distribuerade system, designad för att vara mer förståelig än Paxos. Används för att replikera en logg över flera servrar på ett feltolerant sätt.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex11', question: 'Vad är homomorf kryptering?', answer: 'En form av kryptering som tillåter beräkningar att utföras på krypterad data utan att först dekryptera den. Resultatet av beräkningen är också krypterat.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex12', question: 'Förklara principen bakom Byzantine Fault Tolerance (BFT).', answer: 'BFT handlar om att bygga feltoleranta distribuerade system som kan fungera korrekt även om vissa komponenter (noder) fallerar eller beter sig godtyckligt eller illasinnat (Byzantine faults).', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex13', question: 'Vad är en monad i funktionell programmering?', answer: 'En designpattern (abstraktion) som representerar beräkningar som sekvenser av operationer. Används för att hantera sidoeffekter, tillstånd, I/O etc. på ett rent sätt.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex14', question: 'Vad är skillnaden mellan kompilator och interpretator?', answer: 'En kompilator översätter hela källkoden till maskinkod (eller mellankod) innan exekvering. En interpretator exekverar källkoden rad för rad utan föregående kompilering.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex15', question: 'Diskutera för- och nackdelar med olika concurrency-modeller (t.ex. trådar, async/await, actors).', answer: 'Trådar (delat minne, risk för race conditions), Async/await (icke-blockerande I/O, enklare syntax, event loop), Actors (isolerat tillstånd, meddelandepassering, bra för distribuerade system).', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex16', question: 'Vad är vektordatabaser och vad används de till?', answer: 'Databaser optimerade för att lagra och söka i högdimensionella vektorer (embeddings). Används ofta i AI/ML för likhetssökning, rekommendationssystem och semantisk sökning.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex17', question: 'Förklara begreppet "event sourcing".', answer: 'Ett arkitekturmönster där alla ändringar i applikationens tillstånd lagras som en sekvens av händelser (events), istället för att bara lagra det aktuella tillståndet.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex18', question: 'Vad är WebAssembly (Wasm)?', answer: 'Ett binärt instruktionsformat för en stackbaserad virtuell maskin. Designat som ett kompileringsmål för högpresterande webbapplikationer, körs i webbläsare och utanför.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex19', question: 'Vad är kvantdatorer och hur skiljer de sig från klassiska datorer?', answer: 'Kvantdatorer använder kvantmekaniska fenomen som superposition och sammanflätning för att utföra beräkningar. De använder kvantbitar (qubits) istället för klassiska bitar.', category: 'coding', difficulty: 'expert'},
  { id: 'code_ex20', question: 'Vad är zero-knowledge proofs?', answer: 'En kryptografisk metod där en part (prover) kan bevisa för en annan part (verifier) att ett påstående är sant, utan att avslöja någon information utöver sanningen i själva påståendet.', category: 'coding', difficulty: 'expert'},

];